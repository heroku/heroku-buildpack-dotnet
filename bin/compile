#!/usr/bin/env bash
# Usage: bin/compile <build-dir> <cache-dir> <env-dir>
# See: https://devcenter.heroku.com/articles/buildpack-api

set -euo pipefail

BUILD_DIR="${1}"
ENV_DIR="${3}"

DOTNET_CNB_VERSION="0.1.9"

BUILDPACK_DIR=$(cd "$(dirname "$(dirname "${BASH_SOURCE[0]}")")" && pwd)

source "${BUILDPACK_DIR:?}/lib/output.sh"
source "${BUILDPACK_DIR:?}/vendor/buildpack-stdlib_v8.sh"

CNB_BUILD_DIR="/app/.heroku/cnb/dotnet"
PROFILE_PATH="${BUILD_DIR}/.profile.d/dotnet.sh"

initialize_environment() {
	export_env "${ENV_DIR}" "." ""
	mkdir -p "$(dirname "${PROFILE_PATH}")"
	mkdir -p "${BUILD_DIR}/.heroku/cnb/dotnet"
	mkdir -p "$(dirname "${CNB_BUILD_DIR}")"

	# Create "/app/.heroku/cnb/dotnet" symlink to the actual build directory.
	# This allows the CNB to write path environment variables that work both at
	# runtime and during the build.
	ln -nsf "${BUILD_DIR}/.heroku/cnb/dotnet" "${CNB_BUILD_DIR}"
	touch "${CNB_BUILD_DIR}/buildpack_plan.toml"
	mkdir -p "${CNB_BUILD_DIR}"/{layers,platform}

	export CNB_BUILDPACK_DIR="${BUILDPACK_DIR}/cnb"
	export CNB_TARGET_OS="linux"
	local arch
	arch=$(dpkg --print-architecture)
	export CNB_TARGET_ARCH="${arch}"
	export CNB_TARGET_DISTRO_NAME="ubuntu"
	# shellcheck disable=SC2154 # TODO: Env var is referenced but not assigned.
	export CNB_TARGET_DISTRO_VERSION="${STACK/heroku-/}.04"

	cd "${BUILD_DIR}"
}

download_and_extract_cnb() {
	local buildpack_url="https://github.com/heroku/buildpacks-dotnet/releases/download/v${DOTNET_CNB_VERSION}/heroku_dotnet_${CNB_TARGET_OS}-${CNB_TARGET_ARCH}.cnb"
	local temp_dir
	temp_dir=$(mktemp -d)
	# Download the CNB, modifying file paths to remove leading '/' during extraction
	if ! curl --silent --show-error --location --fail --retry 3 --retry-connrefused --connect-timeout 10 "${buildpack_url}" | tar --transform 's|^/||' --extract --directory "${temp_dir}"; then
		output::error <<-EOF
			Error: Failed to download/extract buildpack from ${buildpack_url}.

			In some cases, this happens due to an unstable network connection.
			Please try again and to see if the error resolves itself.
		EOF
		exit 1
	fi

	local manifest_digest
	manifest_digest=$(jq -r '.manifests[0].digest' "${temp_dir}/index.json")
	local manifest_file="${temp_dir}/blobs/sha256/${manifest_digest#sha256:}"

	# Prepare the target directory and extract layers from the manifest file
	mkdir -p "${CNB_BUILDPACK_DIR}"

	jq -r --exit-status '.layers[].digest' "${manifest_file}" | while read -r layer_digest; do
		# Extract each layer, modifying file paths to remove leading '/', and
		# removing the nested prefix directories (e.g. `cnb/buildpacks/heroku_dotnet/0.1.6`)
		tar --transform 's|^/||' --strip-components=4 -xf "${temp_dir}/blobs/sha256/${layer_digest#sha256:}" -C "${CNB_BUILDPACK_DIR}"
	done
}

# Function to format CNB output, rewriting section prefixes to classic
# buildpack output style.
# TODO: Remove when the CNB supports printing classic output style natively.
format_cnb_output() {
	local skip_next=true # Set to true to avoid leading newline from CNB
	while IFS= read -r line; do
		if ${skip_next}; then
			skip_next=false
			continue
		fi
		if [[ ${line} == *"## Heroku .NET Buildpack"* ]]; then
			skip_next=true # Skip trailing whitespace
			continue       # Drop this line
		fi
		local color_code=''
		local clean_line="${line}"

		# Detect and store ANSI color code at the start of the line, if present
		if [[ "${line}" =~ ^($'\x1b['[0-9;]*'m') ]]; then
			color_code="${BASH_REMATCH[1]}"
			clean_line="${line#"${color_code}"}" # Remove color code for pattern matching
		fi

		# Set prefix and content based on line pattern
		case "${clean_line}" in
			"##"*)
				prefix='----->'
				content="${clean_line:2}"
				;;
			"-"*)
				prefix='----->'
				content="${clean_line:1}"
				;;
			"  -"*)
				prefix='      '
				content="${clean_line:3}"
				;;
			"!"*)
				prefix=' !    '
				content="${clean_line:1}"
				;;
			"")
				prefix=''
				content=''
				;;
			*)
				prefix='   '
				content="${clean_line}"
				;;
		esac
		echo "${color_code}${prefix}${content}"
	done
}

# Run CNB bin/build with formatted output
run_build() {
	"${CNB_BUILDPACK_DIR}/bin/build" "${CNB_BUILD_DIR}/layers" "${CNB_BUILD_DIR}/platform" "${CNB_BUILD_DIR}/buildpack_plan.toml" | format_cnb_output
}

# Remove build layers to reduce slug size
remove_build_layers() {
	for item in "sdk" "nuget-cache"; do
		rm -rf "${CNB_BUILD_DIR}/layers/${item}" "${CNB_BUILD_DIR}/layers/${item}.toml"
	done
}

process_env_files() {
	rm -f "${PROFILE_PATH}"
	find "${CNB_BUILD_DIR}/layers" -type f \( -path "*/env/*" -o -path "*/env.launch/*" \) | while read -r env_file; do
		var_name=$(basename "${env_file}" | cut -d '.' -f 1)
		operation=$(basename "${env_file}" | cut -d '.' -f 2)
		var_value=$(cat "${env_file}")
		case "${operation}" in
			"override") echo "export ${var_name}=\"${var_value}\"" ;;
			"prepend") echo "export ${var_name}=\"${var_value}\${${var_name}:+:\$${var_name}}\"" ;;
			"append") echo "export ${var_name}=\"\${${var_name}:+\$${var_name}:}${var_value}\"" ;;
			"default") echo "export ${var_name}=\"\${${var_name}:-${var_value}}\"" ;;
			*) ;;
		esac >>"${PROFILE_PATH}"
	done
}

initialize_environment
download_and_extract_cnb
run_build
remove_build_layers
process_env_files
